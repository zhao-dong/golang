http://shouce.jb51.net/gopl-zh/ch1/ch1-01.html

golang -  http://shouce.jb51.net/gopl-zh/ch12/ch12-01.html


https://github.com/adonovan/gopl.io/
https://github.com/adonovan/gopl.io/

http://www.gopl.io/ch1.pdf


p1 & p2
import ("math/rand")
godoc fmt Println


godoc
1. https://github.com/golang/tools/tree/master/godoc
2. copy to tools project (https://github.com/golang/tools) to C:\Users\zhaodong\go\src\golang.org\x
3. command line help - go doc math/rand Intn  or go doc fmt.Printf
4. godoc -http=localhost:6060

p3

:= 是声明并赋值，并且系统自动推断类型，不需要var关键字

在函数内部，有一种称为简短变量声明语句的形式可用于声明和初始化局部变量。它以“名字 := 表达式”形式声明变量，变量的类型根据表达式来自动推导。

d := 100

default type - float32???
num1,num2 := 5.6, 9.5

go fmt

go语言开发工具sublime text3 + gosublime配置
https://www.cnblogs.com/rainight/p/10244748.html

p4:

get the address &a
assign a value to *a

 
p5 & p6:
struct
type car struct

p7:
接收器，选择器

// same thing, but as a method of the Point type
func (p Point) Distance(q Point) float64 {
    return math.Hypot(q.X-p.X, q.Y-p.Y)
}
上面的代码里那个附加的参数p，叫做方法的接收器(receiver)
这种p.Distance的表达式叫做选择器

const
value receiver

p8:

Pointer receiver:

func (u *user) fun2() {
    ....
}
Value receiver操作的是值的拷贝，而pointer receiver操作的是实际的值。

vue.js &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
https://blog.csdn.net/lyn1772671980/article/details/80816960
vue-router路由使用 history 模式时，后端SpringBoot如何配置
https://blog.csdn.net/lyn1772671980/article/details/80816960

https://www.jianshu.com/p/5b24ae4cc159

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&


p9:

`` multiple line support

p10 & p11:

[5 5]int == array 
[]int == slice

Go的json解析：Marshal与Unmarshal
https://blog.csdn.net/zxy_666/article/details/80173288

String()方法
对于定于了String()方法的类型，默认输出的时候会调用该方法，实现字符串的打印

slice vs array
数组是一个由固定长度的特定类型元素组成的序列，一个数组可以由零个或多个元素组成。
Slice（切片）代表变长的序列，序列中每个元素都有相同的类型。


p12:

index and value := 

for _, Location := range s.Location {

}

Printf - Printf formats according to a format specifier and writes to standard output. 
It returns the number of bytes written and any write error encountered



Const - Constants cannot be declared using the := syntax


https://studygolang.com/articles/12958
Golang中range的使用方法及注意事项

https://blog.csdn.net/qq_21816375/article/details/77971697
golang之下划线(_)之语义说明

C++浅拷贝

p13

YouTube link
https://www.youtube.com/watch?v=dySAX8VZ2TU&pbjreload=10

It means the location tag underneath the sitemap
type Sitemapindex struct {
    Locations []string `xml: "sitemap>loc"`
}


P14:
go fmt xxx.go

golang语言中map的初始化及使用
https://studygolang.com/articles/2379
make 初始化

source code

//var grades map[string]float32
grades := make(map[string]float32)
grades["Timmy"] = 42
grades["Jess"] = 92
grades["Sam"] = 67

fmt.Println(grades)

TimsGrade := grades["Timmy"]
fmt.Println(TimsGrade)

delete(grades, "Timmy")
fmt.Println(grades)

for key,value := range grades {
fmt.Println(key,":", value)
}


JSON parser
https://www.cnblogs.com/yangshiyu/p/6942414.html

https://www.cnblogs.com/tinywan/p/8570898.html

Golang入门教程（十三）延迟函数defer详解
当一个函数调用前有关键字 defer 时, 那么这个函数的执行会推迟到包含这个 defer 语句的函数即将返回前才执行. 

小结：defer 调用的函数参数的值 defer 被定义时就确定了

小结：需要强调的时, defer 调用的函数参数的值在 defer 定义时就确定了, 而 defer 函数内部所使用的变量的值需要在这个函数运行时才确定

《Go语言高级编程》开源图书，涵盖CGO、Go汇编语言、RPC实现、Protobuf插件实现、Web框架实现、分布式系统等高阶主题(完稿) https://chai2010.cn/advanced-go-progr…
https://github.com/chai2010/advanced-go-programming-book

p15
for idx, data := range news_map {
}

p16 & p17

Golang Templates Cheatsheet
https://curtisvermeeren.github.io/2017/09/14/Golang-Templates-Cheatsheet

{{ range $key, $value := .News}}
{{end }}

https://datatables.net/

source code:
https://pythonprogramming.net/go/template-news-aggregator-go-language-programming-tutorial/


correct version:
<script>$(document).ready(function() {
    $('#fancytable').DataTable();
} );</script>  


error version:
<script type="text/javascript">
	$(document).read(function() {
		$('#fancytable').DataTable();
	});
</script>


p18:

go
time.Sleep(time.Second)
time.Sleep(time.Millisecond)

p19


import sync

sync.WaitGroup
Done()
Wait()
Add(1)

p20

defer 多个defer语句，后进先出 FILO

p21 Panic and Recover

panic
一般而言，当panic异常发生时，程序会中断运行，并立即执行在该goroutine（可以先理解成线程，在第8章会详细介绍）中被延迟的函数（defer 机制）。
当某些不应该发生的场景发生时，我们就应该调用panic。比如，当程序到达了某条逻辑上不可能到达的路径
虽然Go的panic机制类似于其他语言的异常，但panic的适用场景有一些不同。由于panic会引起程序的崩溃，
因此panic一般用于严重错误，如程序内部的逻辑不一致。勤奋的程序员认为任何崩溃都表明代码中存在漏洞，所以对于大部分漏洞，
我们应该使用Go提供的错误机制，而不是panic，尽量避免程序的崩溃。
在健壮的程序中，任何可以预料到的错误，如不正确的输入、错误的配置或是失败的I/O操作都应该被优雅的处理，最好的处理方式，就是使用Go的错误机制。


recover

如果在deferred函数中调用了内置函数recover，并且定义该defer语句的函数发生了panic异常，recover会使程序从panic中恢复，并返回panic value。
导致panic异常的函数不会继续运行，但能正常返回。在未发生panic时调用recover，recover会返回nil。

golang if

if statement;condition{
    //do something
}


p22

channel be default the send/receive is gonna be blocking


p23 buffering and iteration over channels

channel buffer, it can get the item when the channel is closed.
close(channel)





